//------------------------------------------------
//--- 010 Editor v10.0.2 Binary Template
//
//      File: nuccChunkAnm.bt
//   Authors: TheLeonX, Hydra
//   Version: 1.0
//   Purpose: Contains structs for parsing nuccChunks inside Xfbin files
//  Category: 
// File Mask: 
//  ID Bytes: 
//   History: 
//   1.0 - Initial release
//------------------------------------------------

#include "/../include.h";


typedef struct{
    uint trailPointOffset;
    ushort trailPointCount;
    ushort trailPointSize;
    
    uint trailRefOffset;
    ushort trailRefCount;
    ushort trailRefSize;
    
    uint trailParamOffset;
    ushort trailParamCount;
    ushort trailParamSize;
    
    uint trailEffectOffset;
    ushort trailEffectCount;
    ushort trailEffectSize;
    
    uint trailTimelineOffset;
    ushort trailTimelineCount;
    ushort trailTimelineSize;
    
    
    struct{
        u32 ChunkMapID_Animation;
        u32 EntryID;
        FSkip(0x0C);
        u32 FadeTime;
        u32 unk; //doesn't really do anything
        u16 unk1; //doesn't really do anything
        u16 unk2; //doesn't really do anything
        struct{
            struct{
                float R_channel;
                float G_channel;
                float B_channel;
                float A_channel;
            }Color[3];
        }TrailColor; //GradientColor
        float BlendValue; //less value will blend color mainly with 1st and 2nd, bigger value will blend color mainly with 2nd and 3rd color
        struct{
            struct{
                u16 FirstBone <read = (this / 255.0)>; 
                u16 SecondBone <read = (this / 255.0)>; 
            }Width[3];
        }TrailWidth;
    }TrailPoints[trailPointCount];
    
    
    struct{
        u32 ChunkMapID_Billboard;
        u32 EntryID;
        FSkip(0x18);
    }TrailReferences[trailRefCount];
    
    struct{
        u32 ChunkMapID_Coord;
        u32 EntryID;
        FSkip(0x18);
        u32 ChunkMapID_Clump;
        FSkip(0xC);
    }TrailBones[trailParamCount];
    
    struct{
        uint effect_id;
        uint effect_type;
        float pos[3];
        float rot[3];
        uint unk;
        float unk1;
        float unk2;
        uint unk3;
        uint unk4;
        float unkvector[3];
    }TrailEffects[trailEffectCount];
    
    struct{
        uint timelineParam[4];
        int TimeEntryCount;
    
            struct{
                u16 ParticleEnabler;
                u16 Timing;
                local string isEnabled = "???";
                if (ParticleEnabler != 0){
                    isEnabled = "ENABLED";
                }
                else{
                    isEnabled = "DISABLED";
                }
            }TimeEntry[TimeEntryCount] <comment=isEnabled>;
    }TimeEntries[trailTimelineCount];
    ubyte padding[trailTimelineSize - sizeof(TimeEntries)];
}TNuccTrail;