//------------------------------------------------
//--- 010 Editor v10.0.2 Binary Template
//
//      File: xfbin.bt
//   Authors: SutandoTsukai181
//   Version: 1.0
//   Purpose: Parse CC2 Xfbin files
//  Category: 
// File Mask: *.xfbin
//  ID Bytes: 4E 55 43 43
//   History: 
//   1.0 - Initial release
//------------------------------------------------

#define XFBIN

#include "/../include.h"
#include "nucc.bt"

local u32 xfbinColor = SetRandomBackColor();
local u32 chunkTableColor = SetRandomBackColor();
local u32 chunkTableChunkTypeColor = SetRandomBackColor();
local u32 chunkTableFileColor = SetRandomBackColor();
local u32 chunkTableChunkColor = SetRandomBackColor();
local u32 chunkMapColor = SetRandomBackColor();
local u32 extraIndicesColor = SetRandomBackColor();
local u32 chunkMapIndicesColor = SetRandomBackColor();
local u32 chunkColor = SetRandomBackColor();

typedef struct
{
    SetBackColor( xfbinColor );

    char Magic[4];
    Assert( Magic == "NUCC" );

    BigEndian();

    u32 FileId;
    u32 Padding[2] <hidden=true>;
    Assert( Padding[0] == 0 && Padding[1] == 0 );

    u32 ChunkTableSize; // Without ExtraIndices size
    u32 MinPageSize; // Unsure how to describe it: it's either 3 or 3 + NuccPage.ExtraIndicesSize
    u16 FileId1; // == FileId
    u16 Field1A;

    struct TChunkTable ChunkTable;

    local u32 currentPageStart, currentExtraIndicesStart = 0;
    struct
    {
        while ( !FEof() )
        {
            struct TPage Page( currentPageStart, currentExtraIndicesStart );
            currentPageStart += Page.pageSize;
            currentExtraIndicesStart += Page.extraIndicesSize;
        }
    } Pages;

} TXfbin <optimize=false>;

typedef struct
{
    SetBackColor( chunkTableColor );

    u32 ChunkTypeCount;
    u32 ChunkTypeSize;

    u32 FilePathCount;
    u32 FilePathSize;

    u32 ChunkNameCount;
    u32 ChunkNameSize;

    u32 ChunkMapCount;
    u32 ChunkMapSize;

    u32 ChunkMapIndicesCount; // Size is always count * 4
    u32 ExtraIndicesCount; // Size is always count * 2 * 4

    SetBackColor( chunkTableChunkTypeColor );
    struct { struct TString ChunkTypes[ChunkTypeCount]; } ChunkTypes;

    SetBackColor( chunkTableFileColor );
    struct { struct TString FilePaths[FilePathCount]; } FilePaths;

    SetBackColor( chunkTableChunkColor );
    struct { struct TString ChunkNames[ChunkNameCount]; } ChunkNames;

    // Align after strings
    if ( ChunkTypeCount || FilePathCount || ChunkNameCount )
    {
        FSeek( FTell() - 1 );
        FSkip( 4 - ( FTell() % 4 ) );
    }

    Assert( ChunkMapSize % ChunkMapCount == 0 );
    Assert( ChunkMapSize / ChunkMapCount / 4 == 3 );

    SetBackColor( chunkMapColor );
    struct TChunkMap ChunkMaps[ChunkMapCount];

    SetBackColor( extraIndicesColor );
    struct TExtraMapping ExtraMappings[ExtraIndicesCount];

    SetBackColor( chunkMapIndicesColor );
    u32 ChunkMapIndices[ChunkMapIndicesCount];

} TChunkTable <optimize=false>;

typedef struct
{
    SetBackColor( chunkMapColor );

    u32 ChunkTypeIndex <read=ReadChunkTypeIndex>;
    u32 FilePathIndex <read=ReadFilePathIndex>;
    u32 ChunkNameIndex <read=ReadChunkNameIndex>;

    local string chunkReadString = "";
    SPrintf( chunkReadString, "%s (%s)", ReadChunkNameIndex(ChunkNameIndex), ReadChunkTypeIndex(ChunkTypeIndex) );
} TChunkMap <read=ReadTChunkMap>;

typedef struct
{
    u32 ChunkNameIndex;
    u32 ChunkMapIndex;
} TExtraMapping <read=ReadTExtraMapping>;

typedef struct( u32 currentPageStart, u32 currentExtraIndicesStart )
{
    local u32 chunkCount = 0;
    local u32 pageStart = currentPageStart;

    do
    {
        struct TChunk Chunk;
        Assert( sizeof(Chunk) == Chunk.Size + 0xC );
        ++chunkCount;
    } while ( ReadChunkTypeIndex( Chunk.ChunkMap.ChunkTypeIndex ) != "nuccChunkPage" );

    local u32 pageSize = Chunk.NuccPage.PageSize;
    local u32 extraIndicesSize = Chunk.NuccPage.ExtraIndicesSize;

    if ( extraIndicesSize )
    {
        FPush();
        {
            SetBackColor( extraIndicesColor );
            FSeekRel(startof(Xfbin.ChunkTable.ExtraMappings[currentExtraIndicesStart]));
            struct TExtraMapping ExtraMappings[extraIndicesSize];
        }
        FPop();
    }
} TPage <optimize=false, read=ReadTPage>;

typedef struct
{
    SetBackColor( chunkColor );

    u32 Size;
    u32 ChunkMapIndex;
    u16 Version;
    s16 Field0A;

    FPush();
    {
        FSeekRel( startof(Xfbin.ChunkTable.ChunkMaps[GetChunkMapIndex( ChunkMapIndex, parentof(this).pageStart )]) );
        struct TChunkMap ChunkMap <read=ReadTChunkMapType>; // Redefine the struct because we have no other way of accessing it from here
    }
    FPop();

    SetBackColor( chunkColor );

    // Completely avoid chunks with an unsupported version for now
    switch ( ReadChunkTypeIndex( ChunkMap.ChunkTypeIndex ) )
    {
        case "nuccChunkPage":
            struct TNuccPage NuccPage;
            break;
        case "nuccChunkAnm":
            struct TNuccAnm NuccAnm;
            u8 Data[Size - (exists(NuccAnm) ? sizeof(NuccAnm) : 0)];
            break;
        case "nuccChunkTexture":
            struct TNuccTexture NuccTexture;
            break;
        case "nuccChunkDynamics":
            struct TNuccDynamics NuccDynamics;
            break;
        case "nuccChunkCoord":
            struct TNuccCoord NuccCoord;
            break;
        case "nuccChunkClump":
            struct TNuccClump NuccClump;
            break;
        case "nuccChunkMaterial":
            struct TNuccMaterial NuccMaterial;
            break;
        case "nuccChunkModelHit":
            struct TNuccModelHit NuccModelHit;
            break;
        case "nuccChunkAnmStrm":
            struct TNuccAnmStrm NuccAnmStrm;
            break;
        case "nuccChunkAnmStrmFrame":
            struct {
                u32 Frame;
	            u16 EntryCount;
                u16 Unk;
                struct { struct TNuccAnmStrmFrame Entry[EntryCount]; } Entries;
            } NuccAnmStrmFrame;
            break;
        case "nuccChunkParticle":
            struct TNuccParticle NuccParticle;
            u8 Data[Size - (exists(NuccParticle) ? sizeof(NuccParticle) : 0)];
            break;
        case "nuccChunkModelPrimitiveBatch":
            struct TNuccModelPremitiveBatch NuccModelPremitiveBatch;
            break;
        case "nuccChunkPrimitiveVertex":
            struct TNuccPrimitiveVertex NuccPrimitiveVertex;
            break;
        case "nuccChunkModel":
            struct TNuccModelChunk NuccModelChunk;
            break;
        case "nuccChunkFont":
            struct TnuccFont NuccFont;
            break;
        default:
            u8 Data[Size];
            break;
    }

    local string readString = "";
} TChunk <optimize=false, read=ReadTChunk>;

typedef struct
{
    string Data;
} TString <optimize=false, read=ReadTString>;

u32 GetChunkMapIndex( u32 index, u32 pageStart )
{
    return Xfbin.ChunkTable.ChunkMapIndices[pageStart + index];
}

string ReadChunkTypeIndex( u32& value )
{
    return Xfbin.ChunkTable.ChunkTypes.ChunkTypes[value].Data;
}

string ReadFilePathIndex( u32& value )
{
    return Xfbin.ChunkTable.FilePaths.FilePaths[value].Data;
}

string ReadChunkNameIndex( u32& value )
{
    return Xfbin.ChunkTable.ChunkNames.ChunkNames[value].Data;
}

string ReadTChunkMapType( struct TChunkMap& value )
{
    return ReadChunkTypeIndex(value.ChunkTypeIndex);
}

string ReadTChunkMapName( struct TChunkMap& value )
{
    return ReadChunkNameIndex(value.ChunkNameIndex);
}

string ReadTChunkMap( struct TChunkMap& value )
{
    local string str = "";
    local string name = ReadTChunkMapName(value);
    local string type = ReadTChunkMapType(value);

    if ( name != "" ) SPrintf( str, "%s (%s)", name, type );
    return str;
}

string ReadTExtraMapping( struct TExtraMapping& value )
{
    local string str = "";
    local string name = ReadChunkNameIndex( value.ChunkNameIndex );

    if ( name != "" ) SPrintf( str, "%s [%s]", name, ReadTChunkMap(Xfbin.ChunkTable.ChunkMaps[value.ChunkMapIndex]) );
    return str;
}

string ReadTPage( struct TPage& value )
{
    local u32 i = 0;
    local string currentName;

    while ( i < value.chunkCount )
    {
        currentName = ReadTChunk( value.Chunk[i] );
        if ( currentName != "" )
        {
            if ( ReadTChunkMapType( Xfbin.ChunkTable.ChunkMaps[GetChunkMapIndex( value.Chunk[i].ChunkMapIndex, parentof(value.Chunk[i]).pageStart )] ) == "nuccChunkClump" )
            {
                // Return the chunk's name if it's a clump
                return currentName;
            }

            if ( i + 1 < value.chunkCount && Strncmp( ReadTChunk(value.Chunk[i + 1]), "Page", 4 ) == 0 )
            {
                // Return the chunk's name if it's the last (named) chunk in the page
                return currentName;
            }
        }
        ++i;
    }

    return "";
}

string ReadTChunk( struct TChunk& value )
{

    if ( value.readString == "" )
    {
        local string name = ReadTChunkMapName( Xfbin.ChunkTable.ChunkMaps[GetChunkMapIndex( value.ChunkMapIndex, parentof(value).pageStart )] );
        local string type = ReadTChunkMapType( Xfbin.ChunkTable.ChunkMaps[GetChunkMapIndex( value.ChunkMapIndex, parentof(value).pageStart )] );

        if ( name != "" ) SPrintf( value.readString, "%s (%s)", name, type );
    }

    return value.readString;
}

string ReadTString( struct TString& value )
{
    return value.Data;
}

TXfbin Xfbin;
